name: Taboor CI

on:
  push:
    branches: [ main ]

jobs:
  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate critical files
      run: |
        echo "=== PROJECT STRUCTURE VALIDATION ==="
        
        # Critical files that must exist
        critical_files=(
          "frontend/index.html"
          "frontend/Main.js" 
          "frontend/style.css"
          "backend/Nootbook.ipynb"
          "backend/queue_data.csv"
          "backend/server.js"
          "database/taboor.db"
          "database/schema.sql"
        )
        
        all_files_exist=true
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå MISSING: $file"
            all_files_exist=false
          fi
        done
        
        if [ "$all_files_exist" = false ]; then
          echo "üö® Critical files missing - failing CI"
          exit 1
        fi
        
        echo "‚úÖ All critical files present"

  validate-syntax:
    name: Validate Code Syntax
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Validate Python syntax
      run: |
        echo "=== PYTHON SYNTAX VALIDATION ==="
        
        # Find all Python files
        python_files=$(find . -name "*.py" -type f)
        
        if [ -z "$python_files" ]; then
          echo "‚ÑπÔ∏è No Python files found"
          exit 0
        fi
        
        echo "Found Python files:"
        echo "$python_files"
        
        # Check each Python file for syntax errors - EXIT ON FIRST ERROR
        for file in $python_files; do
          echo "Checking: $file"
          if ! python -m py_compile "$file"; then
            echo "‚ùå SYNTAX ERROR in: $file"
            echo "üö® Python syntax errors found - failing CI"
            exit 1
          fi
        done
        
        echo "‚úÖ All Python files have valid syntax"

    - name: Validate JavaScript syntax
      run: |
        echo "=== JAVASCRIPT SYNTAX VALIDATION ==="
        
        # Find all JavaScript files
        js_files=$(find . -name "*.js" -type f)
        
        if [ -z "$js_files" ]; then
          echo "‚ÑπÔ∏è No JavaScript files found"
          exit 0
        fi
        
        echo "Found JavaScript files:"
        echo "$js_files"
        
        # Check each JavaScript file for syntax errors - EXIT ON FIRST ERROR
        for file in $js_files; do
          echo "Checking: $file"
          if ! node -c "$file"; then
            echo "‚ùå SYNTAX ERROR in: $file"
            echo "üö® JavaScript syntax errors found - failing CI"
            exit 1
          fi
        done
        
        echo "‚úÖ All JavaScript files have valid syntax"

  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Python dependencies
      run: |
        pip install pytest
    
    - name: Run Python tests
      run: |
        echo "=== PYTHON UNIT TESTS ==="
        
        python_test_files=$(find . -name "test_*.py" -type f)
        
        if [ -z "$python_test_files" ]; then
          echo "üö® No Python test files found - THIS SHOULD FAIL CI"
          echo "You should have test files in your project"
          exit 1
        fi
        
        echo "Running Python tests:"
        echo "$python_test_files"
        
        # Run pytest - this will FAIL CI if any test fails
        python -m pytest -v --tb=short

    - name: Run JavaScript tests
      run: |
        echo "=== JAVASCRIPT UNIT TESTS ==="
        
        js_test_files=$(find . -name "test_*.js" -type f)
        
        if [ -z "$js_test_files" ]; then
          echo "üö® No JavaScript test files found - THIS SHOULD FAIL CI"
          echo "You should have test files in your project"
          exit 1
        fi
        
        echo "Running JavaScript tests:"
        echo "$js_test_files"
        
        # Run each JavaScript test and FAIL if any test fails
        for test_file in $js_test_files; do
          echo "Running: $test_file"
          if ! node "$test_file"; then
            echo "‚ùå $test_file - FAILED"
            echo "üö® JavaScript tests failed - failing CI"
            exit 1
          fi
          echo "‚úÖ $test_file - PASSED"
        done
        
        echo "‚úÖ All JavaScript tests passed"

  final-report:
    name: Final CI Report
    runs-on: ubuntu-latest
    needs: [validate-structure, validate-syntax, run-tests]
    
    steps:
    - name: Generate CI Report
      run: |
        echo " "
        echo "=========================================="
        echo "üöÄ TABOOR CI PIPELINE - COMPLETE"
        echo "=========================================="
        echo " "
        echo "üìä EXECUTION SUMMARY:"
        echo "‚îú‚îÄ‚îÄ Project Structure: ${{ needs.validate-structure.result }}"
        echo "‚îú‚îÄ‚îÄ Code Syntax: ${{ needs.validate-syntax.result }}"
        echo "‚îî‚îÄ‚îÄ Unit Tests: ${{ needs.run-tests.result }}"
        echo " "
        
        if [[ "${{ needs.validate-structure.result }}" == "success" && 
              "${{ needs.validate-syntax.result }}" == "success" && 
              "${{ needs.run-tests.result }}" == "success" ]]; then
          echo "üéâ ALL CHECKS PASSED!"
          echo "üí° Your code is production-ready."
        else
          echo "‚ö†Ô∏è  SOME CHECKS FAILED"
          echo "üîß Please fix the issues above."
          exit 1
        fi
        
        echo " "
        echo "=========================================="